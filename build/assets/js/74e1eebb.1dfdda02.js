"use strict";(self.webpackChunkkhanhhv_docs=self.webpackChunkkhanhhv_docs||[]).push([[4112],{4137:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>k});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=p(t),d=r,k=c["".concat(l,".").concat(d)]||c[d]||u[d]||o;return t?a.createElement(k,i(i({ref:n},m),{},{components:t})):a.createElement(k,i({ref:n},m))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6280:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=t(3117),r=(t(7294),t(4137));const o={title:"JavaScript Style Guide",description:"JavaScript Style Guide",slug:"/coding-style-guide/java-script"},i=void 0,s={unversionedId:"CodingStyleGuide/JavaScript/index",id:"CodingStyleGuide/JavaScript/index",title:"JavaScript Style Guide",description:"JavaScript Style Guide",source:"@site/docs/CodingStyleGuide/JavaScript/index.mdx",sourceDirName:"CodingStyleGuide/JavaScript",slug:"/coding-style-guide/java-script",permalink:"/docs/build/docs/coding-style-guide/java-script",draft:!1,tags:[],version:"current",lastUpdatedBy:"Truong vi",lastUpdatedAt:1678977213,formattedLastUpdatedAt:"Mar 16, 2023",frontMatter:{title:"JavaScript Style Guide",description:"JavaScript Style Guide",slug:"/coding-style-guide/java-script"},sidebar:"codingStyleGuide",previous:{title:"Common Style Guide",permalink:"/docs/build/docs/coding-style-guide/common"},next:{title:"ReactJs Style Guide",permalink:"/docs/build/docs/coding-style-guide/front-end/react-js"}},l={},p=[{value:"Types",id:"types",level:2},{value:"Reference",id:"reference",level:2},{value:"Objects",id:"objects",level:2},{value:"Arrays",id:"arrays",level:2},{value:"Strings",id:"strings",level:2},{value:"Functions",id:"functions",level:2},{value:"Arrow Functions",id:"arrow-functions",level:2},{value:"Classes &amp; Constructors",id:"classes--constructors",level:2},{value:"Modules",id:"modules",level:2},{value:"Iterators and Generators",id:"iterators-and-generators",level:2},{value:"Properties",id:"properties",level:2},{value:"Variables",id:"variables",level:2},{value:"Hoisting",id:"hoisting",level:2},{value:"Comparison Operators &amp; Equality",id:"comparison-operators--equality",level:2},{value:"Blocks",id:"blocks",level:2},{value:"Control Statements",id:"control-statements",level:2},{value:"Comments",id:"comments",level:2},{value:"Whitespace",id:"whitespace",level:2}],m={toc:p};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"types"},"Types"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#types--primitives"},"1.1")," ",(0,r.kt)("strong",{parentName:"p"},"Primitives"),": When you access a primitive type you work directly on its value."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"string")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"number")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"boolean")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"null")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"undefined")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"symbol")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"bigint"))),(0,r.kt)("br",null),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const foo = 1;\nlet bar = foo;\nbar = 9;\n\nconsole.log(foo, bar); // => 1, 9\n")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Symbols and BigInts cannot be faithfully polyfilled, so they should not be used when targeting browsers/environments that don\u2019t support them natively."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#types--complex"},"1.2")," ",(0,r.kt)("strong",{parentName:"p"},"Complex"),": When you access a complex type you work on a reference to its value."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"object")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"array")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"function"))),(0,r.kt)("br",null),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const foo = [1, 2];\nconst bar = foo;\n\nbar[0] = 9;\n\nconsole.log(foo[0], bar[0]); // => 9, 9\n")))),(0,r.kt)("h2",{id:"reference"},"Reference"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#references--prefer-const"},"2.1")," Use ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," for all of your references; avoid using ",(0,r.kt)("inlineCode",{parentName:"p"},"var"),". eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/prefer-const"},(0,r.kt)("inlineCode",{parentName:"a"},"prefer-const")),", ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-const-assign"},(0,r.kt)("inlineCode",{parentName:"a"},"no-const-assign"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? This ensures that you can\u2019t reassign your references, which can lead to bugs and difficult to comprehend code.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nvar a = 1;\nvar b = 2;\n\n// good\nconst a = 1;\nconst b = 2;\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#references--disallow-var"},"2.2")," If you must reassign references, use ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"var"),". eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-var"},(0,r.kt)("inlineCode",{parentName:"a"},"no-var"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," is block-scoped rather than function-scoped like ",(0,r.kt)("inlineCode",{parentName:"p"},"var"),".")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nvar count = 1;\nif (true) {\n  count += 1;\n}\n\n// good, use the let.\nlet count = 1;\nif (true) {\n  count += 1;\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#references--block-scope"},"2.3")," Note that both ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," are block-scoped, whereas ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," is function-scoped."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// const and let only exist in the blocks they are defined in.\n{\n  let a = 1;\n  const b = 1;\n  var c = 1;\n}\nconsole.log(a); // ReferenceError\nconsole.log(b); // ReferenceError\nconsole.log(c); // Prints 1\n")),(0,r.kt)("p",{parentName:"li"},"In the above code, you can see that referencing ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"b")," will produce a ReferenceError, while ",(0,r.kt)("inlineCode",{parentName:"p"},"c")," contains the number. This is because ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"b")," are block scoped, while ",(0,r.kt)("inlineCode",{parentName:"p"},"c")," is scoped to the containing function."))),(0,r.kt)("h2",{id:"objects"},"Objects"),(0,r.kt)("a",{name:"objects--no-new"}),(0,r.kt)("a",{name:"3.1"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#objects--no-new"},"3.1")," Use the literal syntax for object creation. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-new-object"},(0,r.kt)("inlineCode",{parentName:"a"},"no-new-object"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst item = new Object();\n\n// good\nconst item = {};\n")))),(0,r.kt)("a",{name:"es6-computed-properties"}),(0,r.kt)("a",{name:"3.4"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#es6-computed-properties"},"3.2")," Use computed property names when creating objects with dynamic property names."),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? They allow you to define all the properties of an object in one place.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"function getKey(k) {\n  return `a key named ${k}`;\n}\n\n// bad\nconst obj = {\n  id: 5,\n  name: 'San Francisco',\n};\nobj[getKey('enabled')] = true;\n\n// good\nconst obj = {\n  id: 5,\n  name: 'San Francisco',\n  [getKey('enabled')]: true,\n};\n")))),(0,r.kt)("a",{name:"es6-object-shorthand"}),(0,r.kt)("a",{name:"3.5"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#es6-object-shorthand"},"3.3")," Use object method shorthand. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/object-shorthand"},(0,r.kt)("inlineCode",{parentName:"a"},"object-shorthand"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst atom = {\n  value: 1,\n  addValue: function (value) {\n    return atom.value + value;\n  },\n};\n\n// good\nconst atom = {\n  value: 1,\n  addValue(value) {\n    return atom.value + value;\n  },\n};\n")))),(0,r.kt)("a",{name:"es6-object-concise"}),(0,r.kt)("a",{name:"3.6"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#es6-object-concise"},"3.4")," Use property value shorthand. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/object-shorthand"},(0,r.kt)("inlineCode",{parentName:"a"},"object-shorthand"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? It is shorter and descriptive.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const lukeSkywalker = 'Luke Skywalker';\n\n// bad\nconst obj = {\n  lukeSkywalker: lukeSkywalker,\n};\n\n// good\nconst obj = {\n  lukeSkywalker,\n};\n")))),(0,r.kt)("a",{name:"objects--grouped-shorthand"}),(0,r.kt)("a",{name:"3.7"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#objects--grouped-shorthand"},"3.5")," Group your shorthand properties at the beginning of your object declaration."),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? It\u2019s easier to tell which properties are using the shorthand.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const anakinSkywalker = 'Anakin Skywalker';\nconst lukeSkywalker = 'Luke Skywalker';\n\n// bad\nconst obj = {\n  episodeOne: 1,\n  twoJediWalkIntoACantina: 2,\n  lukeSkywalker,\n  episodeThree: 3,\n  mayTheFourth: 4,\n  anakinSkywalker,\n};\n\n// good\nconst obj = {\n  lukeSkywalker,\n  anakinSkywalker,\n  episodeOne: 1,\n  twoJediWalkIntoACantina: 2,\n  episodeThree: 3,\n  mayTheFourth: 4,\n};\n")))),(0,r.kt)("a",{name:"objects--quoted-props"}),(0,r.kt)("a",{name:"3.8"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#objects--quoted-props"},"3.6")," Only quote properties that are invalid identifiers. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/quote-props"},(0,r.kt)("inlineCode",{parentName:"a"},"quote-props"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? In general we consider it subjectively easier to read. It improves syntax highlighting, and is also more easily optimized by many JS engines.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst bad = {\n  'foo': 3,\n  'bar': 4,\n  'data-blah': 5,\n};\n\n// good\nconst good = {\n  foo: 3,\n  bar: 4,\n  'data-blah': 5,\n};\n")))),(0,r.kt)("a",{name:"objects--prototype-builtins"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#objects--prototype-builtins"},"3.7")," Do not call ",(0,r.kt)("inlineCode",{parentName:"p"},"Object.prototype")," methods directly, such as ",(0,r.kt)("inlineCode",{parentName:"p"},"hasOwnProperty"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"propertyIsEnumerable"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"isPrototypeOf"),". eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-prototype-builtins"},(0,r.kt)("inlineCode",{parentName:"a"},"no-prototype-builtins"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? These methods may be shadowed by properties on the object in question - consider ",(0,r.kt)("inlineCode",{parentName:"p"},"{ hasOwnProperty: false }")," - or, the object may be a null object (",(0,r.kt)("inlineCode",{parentName:"p"},"Object.create(null)"),").")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconsole.log(object.hasOwnProperty(key));\n\n// good\nconsole.log(Object.prototype.hasOwnProperty.call(object, key));\n\n// best\nconst has = Object.prototype.hasOwnProperty; // cache the lookup once, in module scope.\nconsole.log(has.call(object, key));\n/* or */\nimport has from 'has'; // https://www.npmjs.com/package/has\nconsole.log(has(object, key));\n/* or */\nconsole.log(Object.hasOwn(object, key)); // https://www.npmjs.com/package/object.hasown\n")))),(0,r.kt)("a",{name:"objects--rest-spread"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#objects--rest-spread"},"3.8")," Prefer the object spread syntax over ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"},(0,r.kt)("inlineCode",{parentName:"a"},"Object.assign"))," to shallow-copy objects. Use the object rest parameter syntax to get a new object with certain properties omitted. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/prefer-object-spread"},(0,r.kt)("inlineCode",{parentName:"a"},"prefer-object-spread"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// very bad\nconst original = { a: 1, b: 2 };\nconst copy = Object.assign(original, { c: 3 }); // this mutates `original` \u0ca0_\u0ca0\ndelete copy.a; // so does this\n\n// bad\nconst original = { a: 1, b: 2 };\nconst copy = Object.assign({}, original, { c: 3 }); // copy => { a: 1, b: 2, c: 3 }\n// good\nconst original = { a: 1, b: 2 };\nconst copy = { ...original, c: 3 }; // copy => { a: 1, b: 2, c: 3 }\nconst { a, ...noA } = copy; // noA => { b: 2, c: 3 }\n")))),(0,r.kt)("h2",{id:"arrays"},"Arrays"),(0,r.kt)("a",{name:"arrays--literals"}),(0,r.kt)("a",{name:"4.1"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#arrays--literals"},"4.1")," Use the literal syntax for array creation. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-array-constructor"},(0,r.kt)("inlineCode",{parentName:"a"},"no-array-constructor"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst items = new Array();\n\n// good\nconst items = [];\n")))),(0,r.kt)("a",{name:"arrays--push"}),(0,r.kt)("a",{name:"4.2"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#arrays--push"},"4.2")," Use ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push"},"Array#push")," instead of direct assignment to add items to an array."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const someStack = [];\n\n// bad\nsomeStack[someStack.length] = 'abracadabra';\n\n// good\nsomeStack.push('abracadabra');\n")))),(0,r.kt)("a",{name:"es6-array-spreads"}),(0,r.kt)("a",{name:"4.3"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#es6-array-spreads"},"4.3")," Use array spreads ",(0,r.kt)("inlineCode",{parentName:"p"},"...")," to copy arrays."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst len = items.length;\nconst itemsCopy = [];\nlet i;\n\nfor (i = 0; i < len; i += 1) {\n  itemsCopy[i] = items[i];\n}\n\n// good\nconst itemsCopy = [...items];\n")))),(0,r.kt)("a",{name:"arrays--from"}),(0,r.kt)("a",{name:"arrays--from-iterable"}),(0,r.kt)("a",{name:"4.4"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#arrays--from-iterable"},"4.4")," To convert an iterable object to an array, use spreads ",(0,r.kt)("inlineCode",{parentName:"p"},"...")," instead of ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from"},(0,r.kt)("inlineCode",{parentName:"a"},"Array.from"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const foo = document.querySelectorAll('.foo');\n\n// good\nconst nodes = Array.from(foo);\n\n// best\nconst nodes = [...foo];\n")))),(0,r.kt)("a",{name:"arrays--from-array-like"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#arrays--from-array-like"},"4.5")," Use ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from"},(0,r.kt)("inlineCode",{parentName:"a"},"Array.from"))," for converting an array-like object to an array."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const arrLike = { 0: 'foo', 1: 'bar', 2: 'baz', length: 3 };\n\n// bad\nconst arr = Array.prototype.slice.call(arrLike);\n\n// good\nconst arr = Array.from(arrLike);\n")))),(0,r.kt)("a",{name:"arrays--mapping"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#arrays--mapping"},"4.6")," Use ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from"},(0,r.kt)("inlineCode",{parentName:"a"},"Array.from"))," instead of spread ",(0,r.kt)("inlineCode",{parentName:"p"},"...")," for mapping over iterables, because it avoids creating an intermediate array."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst baz = [...foo].map(bar);\n\n// good\nconst baz = Array.from(foo, bar);\n")))),(0,r.kt)("a",{name:"arrays--callback-return"}),(0,r.kt)("a",{name:"4.5"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#arrays--callback-return"},"4.7")," Use return statements in array method callbacks. It\u2019s ok to omit the return if the function body consists of a single statement returning an expression without side effects, following ",(0,r.kt)("a",{parentName:"p",href:"#arrows--implicit-return"},"8.2"),". eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/array-callback-return"},(0,r.kt)("inlineCode",{parentName:"a"},"array-callback-return"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// good\n[1, 2, 3].map((x) => {\n  const y = x + 1;\n  return x * y;\n});\n\n// good\n[1, 2, 3].map((x) => x + 1);\n\n// bad - no returned value means `acc` becomes undefined after the first iteration\n[[0, 1], [2, 3], [4, 5]].reduce((acc, item, index) => {\n  const flatten = acc.concat(item);\n});\n\n// good\n[[0, 1], [2, 3], [4, 5]].reduce((acc, item, index) => {\n  const flatten = acc.concat(item);\n  return flatten;\n});\n\n// bad\ninbox.filter((msg) => {\n  const { subject, author } = msg;\n  if (subject === 'Mockingbird') {\n    return author === 'Harper Lee';\n  } else {\n    return false;\n  }\n});\n\n// good\ninbox.filter((msg) => {\n  const { subject, author } = msg;\n  if (subject === 'Mockingbird') {\n    return author === 'Harper Lee';\n  }\n\n  return false;\n});\n")))),(0,r.kt)("a",{name:"arrays--bracket-newline"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#arrays--bracket-newline"},"4.8")," Use line breaks after open and before close array brackets if an array has multiple lines"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst arr = [\n  [0, 1], [2, 3], [4, 5],\n];\n\nconst objectInArray = [{\n  id: 1,\n}, {\n  id: 2,\n}];\n\nconst numberInArray = [\n  1, 2,\n];\n\n// good\nconst arr = [[0, 1], [2, 3], [4, 5]];\n\nconst objectInArray = [\n  {\n    id: 1,\n  },\n  {\n    id: 2,\n  },\n];\n\nconst numberInArray = [\n  1,\n  2,\n];\n")))),(0,r.kt)("h2",{id:"strings"},"Strings"),(0,r.kt)("a",{name:"strings--quotes"}),(0,r.kt)("a",{name:"6.1"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#strings--quotes"},"6.1")," Use single quotes ",(0,r.kt)("inlineCode",{parentName:"p"},"''")," for strings. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/quotes"},(0,r.kt)("inlineCode",{parentName:"a"},"quotes"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst name = \"Capt. Janeway\";\n\n// bad - template literals should contain interpolation or newlines\nconst name = `Capt. Janeway`;\n\n// good\nconst name = 'Capt. Janeway';\n")))),(0,r.kt)("a",{name:"strings--line-length"}),(0,r.kt)("a",{name:"6.2"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#strings--line-length"},"6.2")," Strings that cause the line to go over 100 characters should not be written across multiple lines using string concatenation."),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? Broken strings are painful to work with and make code less searchable.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst errorMessage = 'This is a super long error that was thrown because \\\nof Batman. When you stop to think about how Batman had anything to do \\\nwith this, you would get nowhere \\\nfast.';\n\n// bad\nconst errorMessage = 'This is a super long error that was thrown because ' +\n  'of Batman. When you stop to think about how Batman had anything to do ' +\n  'with this, you would get nowhere fast.';\n\n// good\nconst errorMessage = 'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.';\n")))),(0,r.kt)("a",{name:"es6-template-literals"}),(0,r.kt)("a",{name:"6.4"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#es6-template-literals"},"6.3")," When programmatically building up strings, use template strings instead of concatenation. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/prefer-template"},(0,r.kt)("inlineCode",{parentName:"a"},"prefer-template"))," ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/template-curly-spacing"},(0,r.kt)("inlineCode",{parentName:"a"},"template-curly-spacing"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? Template strings give you a readable, concise syntax with proper newlines and string interpolation features.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nfunction sayHi(name) {\n  return 'How are you, ' + name + '?';\n}\n\n// bad\nfunction sayHi(name) {\n  return ['How are you, ', name, '?'].join();\n}\n\n// bad\nfunction sayHi(name) {\n  return `How are you, ${ name }?`;\n}\n\n// good\nfunction sayHi(name) {\n  return `How are you, ${name}?`;\n}\n")))),(0,r.kt)("a",{name:"strings--eval"}),(0,r.kt)("a",{name:"6.5"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#strings--eval"},"6.4")," Never use ",(0,r.kt)("inlineCode",{parentName:"li"},"eval()")," on a string, it opens too many vulnerabilities. eslint: ",(0,r.kt)("a",{parentName:"li",href:"https://eslint.org/docs/rules/no-eval"},(0,r.kt)("inlineCode",{parentName:"a"},"no-eval")))),(0,r.kt)("a",{name:"strings--escaping"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#strings--escaping"},"6.5")," Do not unnecessarily escape characters in strings. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-useless-escape"},(0,r.kt)("inlineCode",{parentName:"a"},"no-useless-escape"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? Backslashes harm readability, thus they should only be present when necessary.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst foo = '\\'this\\' \\i\\s \\\"quoted\\\"';\n\n// good\nconst foo = '\\'this\\' is \"quoted\"';\nconst foo = `my name is '${name}'`;\n")))),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("a",{name:"functions--declarations"}),(0,r.kt)("a",{name:"7.1"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#functions--declarations"},"7.1")," Use named function expressions instead of function declarations. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/func-style"},(0,r.kt)("inlineCode",{parentName:"a"},"func-style"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? Function declarations are hoisted, which means that it\u2019s easy - too easy - to reference the function before it is defined in the file. This harms readability and maintainability. If you find that a function\u2019s definition is large or complex enough that it is interfering with understanding the rest of the file, then perhaps it\u2019s time to extract it to its own module! Don\u2019t forget to explicitly name the expression, regardless of whether or not the name is inferred from the containing variable (which is often the case in modern browsers or when using compilers such as Babel). This eliminates any assumptions made about the Error\u2019s call stack. (",(0,r.kt)("a",{parentName:"p",href:"https://github.com/airbnb/javascript/issues/794"},"Discussion"),")")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nfunction foo() {\n  // ...\n}\n\n// bad\nconst foo = function () {\n  // ...\n};\n\n// good\n// lexical name distinguished from the variable-referenced invocation(s)\nconst short = function longUniqueMoreDescriptiveLexicalFoo() {\n  // ...\n};\n")))),(0,r.kt)("a",{name:"functions--iife"}),(0,r.kt)("a",{name:"7.2"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#functions--iife"},"7.2")," Wrap immediately invoked function expressions in parentheses. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/wrap-iife"},(0,r.kt)("inlineCode",{parentName:"a"},"wrap-iife"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? An immediately invoked function expression is a single unit - wrapping both it, and its invocation parens, in parens, cleanly expresses this. Note that in a world with modules everywhere, you almost never need an IIFE.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// immediately-invoked function expression (IIFE)\n(function () {\n  console.log('Welcome to the Internet. Please follow me.');\n}());\n")))),(0,r.kt)("a",{name:"functions--in-blocks"}),(0,r.kt)("a",{name:"7.3"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#functions--in-blocks"},"7.3")," Never declare a function in a non-function block (",(0,r.kt)("inlineCode",{parentName:"li"},"if"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"while"),", etc). Assign the function to a variable instead. Browsers will allow you to do it, but they all interpret it differently, which is bad news bears. eslint: ",(0,r.kt)("a",{parentName:"li",href:"https://eslint.org/docs/rules/no-loop-func"},(0,r.kt)("inlineCode",{parentName:"a"},"no-loop-func")))),(0,r.kt)("a",{name:"functions--note-on-blocks"}),(0,r.kt)("a",{name:"7.4"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#functions--note-on-blocks"},"7.4")," ",(0,r.kt)("strong",{parentName:"p"},"Note:")," ECMA-262 defines a ",(0,r.kt)("inlineCode",{parentName:"p"},"block")," as a list of statements. A function declaration is not a statement."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nif (currentUser) {\n  function test() {\n    console.log('Nope.');\n  }\n}\n\n// good\nlet test;\nif (currentUser) {\n  test = () => {\n    console.log('Yup.');\n  };\n}\n")))),(0,r.kt)("a",{name:"functions--arguments-shadow"}),(0,r.kt)("a",{name:"7.5"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#functions--arguments-shadow"},"7.5")," Never name a parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"arguments"),". This will take precedence over the ",(0,r.kt)("inlineCode",{parentName:"p"},"arguments")," object that is given to every function scope."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nfunction foo(name, options, arguments) {\n  // ...\n}\n\n// good\nfunction foo(name, options, args) {\n  // ...\n}\n")))),(0,r.kt)("a",{name:"es6-rest"}),(0,r.kt)("a",{name:"7.6"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#es6-rest"},"7.6")," Never use ",(0,r.kt)("inlineCode",{parentName:"p"},"arguments"),", opt to use rest syntax ",(0,r.kt)("inlineCode",{parentName:"p"},"...")," instead. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/prefer-rest-params"},(0,r.kt)("inlineCode",{parentName:"a"},"prefer-rest-params"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? ",(0,r.kt)("inlineCode",{parentName:"p"},"...")," is explicit about which arguments you want pulled. Plus, rest arguments are a real Array, and not merely Array-like like ",(0,r.kt)("inlineCode",{parentName:"p"},"arguments"),".")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nfunction concatenateAll() {\n  const args = Array.prototype.slice.call(arguments);\n  return args.join('');\n}\n\n// good\nfunction concatenateAll(...args) {\n  return args.join('');\n}\n")))),(0,r.kt)("a",{name:"es6-default-parameters"}),(0,r.kt)("a",{name:"7.7"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#es6-default-parameters"},"7.7")," Use default parameter syntax rather than mutating function arguments."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// really bad\nfunction handleThings(opts) {\n  // No! We shouldn\u2019t mutate function arguments.\n  // Double bad: if opts is falsy it'll be set to an object which may\n  // be what you want but it can introduce subtle bugs.\n  opts = opts || {};\n  // ...\n}\n\n// still bad\nfunction handleThings(opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  // ...\n}\n\n// good\nfunction handleThings(opts = {}) {\n  // ...\n}\n")))),(0,r.kt)("a",{name:"functions--default-side-effects"}),(0,r.kt)("a",{name:"7.8"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#functions--default-side-effects"},"7.8")," Avoid side effects with default parameters."),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? They are confusing to reason about.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"let b = 1;\n// bad\nfunction count(a = b++) {\n  console.log(a);\n}\ncount();  // 1\ncount();  // 2\ncount(3); // 3\ncount();  // 3\n")))),(0,r.kt)("a",{name:"functions--defaults-last"}),(0,r.kt)("a",{name:"7.9"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#functions--defaults-last"},"7.9")," Always put default parameters last. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/default-param-last"},(0,r.kt)("inlineCode",{parentName:"a"},"default-param-last"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nfunction handleThings(opts = {}, name) {\n  // ...\n}\n\n// good\nfunction handleThings(name, opts = {}) {\n  // ...\n}\n")))),(0,r.kt)("a",{name:"functions--constructor"}),(0,r.kt)("a",{name:"7.10"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#functions--constructor"},"7.10")," Never use the Function constructor to create a new function. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-new-func"},(0,r.kt)("inlineCode",{parentName:"a"},"no-new-func"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? Creating a function in this way evaluates a string similarly to ",(0,r.kt)("inlineCode",{parentName:"p"},"eval()"),", which opens vulnerabilities.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst add = new Function('a', 'b', 'return a + b');\n\n// still bad\nconst subtract = Function('a', 'b', 'return a - b');\n")))),(0,r.kt)("a",{name:"functions--signature-spacing"}),(0,r.kt)("a",{name:"7.11"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#functions--signature-spacing"},"7.11")," Spacing in a function signature. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/space-before-function-paren"},(0,r.kt)("inlineCode",{parentName:"a"},"space-before-function-paren"))," ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/space-before-blocks"},(0,r.kt)("inlineCode",{parentName:"a"},"space-before-blocks"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? Consistency is good, and you shouldn\u2019t have to add or remove a space when adding or removing a name.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst f = function(){};\nconst g = function (){};\nconst h = function() {};\n\n// good\nconst x = function () {};\nconst y = function a() {};\n")))),(0,r.kt)("a",{name:"functions--mutate-params"}),(0,r.kt)("a",{name:"7.12"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#functions--mutate-params"},"7.12")," Never mutate parameters. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-param-reassign"},(0,r.kt)("inlineCode",{parentName:"a"},"no-param-reassign"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? Manipulating objects passed in as parameters can cause unwanted variable side effects in the original caller.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nfunction f1(obj) {\n  obj.key = 1;\n}\n\n// good\nfunction f2(obj) {\n  const key = Object.prototype.hasOwnProperty.call(obj, 'key') ? obj.key : 1;\n}\n")))),(0,r.kt)("a",{name:"functions--reassign-params"}),(0,r.kt)("a",{name:"7.13"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#functions--reassign-params"},"7.13")," Never reassign parameters. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-param-reassign"},(0,r.kt)("inlineCode",{parentName:"a"},"no-param-reassign"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? Reassigning parameters can lead to unexpected behavior, especially when accessing the ",(0,r.kt)("inlineCode",{parentName:"p"},"arguments")," object. It can also cause optimization issues, especially in V8.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nfunction f1(a) {\n  a = 1;\n  // ...\n}\n\nfunction f2(a) {\n  if (!a) { a = 1; }\n  // ...\n}\n\n// good\nfunction f3(a) {\n  const b = a || 1;\n  // ...\n}\n\nfunction f4(a = 1) {\n  // ...\n}\n")))),(0,r.kt)("a",{name:"functions--spread-vs-apply"}),(0,r.kt)("a",{name:"7.14"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#functions--spread-vs-apply"},"7.14")," Prefer the use of the spread syntax ",(0,r.kt)("inlineCode",{parentName:"p"},"...")," to call variadic functions. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/prefer-spread"},(0,r.kt)("inlineCode",{parentName:"a"},"prefer-spread"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? It\u2019s cleaner, you don\u2019t need to supply a context, and you can not easily compose ",(0,r.kt)("inlineCode",{parentName:"p"},"new")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"apply"),".")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst x = [1, 2, 3, 4, 5];\nconsole.log.apply(console, x);\n\n// good\nconst x = [1, 2, 3, 4, 5];\nconsole.log(...x);\n\n// bad\nnew (Function.prototype.bind.apply(Date, [null, 2016, 8, 5]));\n\n// good\nnew Date(...[2016, 8, 5]);\n")))),(0,r.kt)("a",{name:"functions--signature-invocation-indentation"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#functions--signature-invocation-indentation"},"7.15")," Functions with multiline signatures, or invocations, should be indented just like every other multiline list in this guide: with each item on a line by itself, with a trailing comma on the last item. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/function-paren-newline"},(0,r.kt)("inlineCode",{parentName:"a"},"function-paren-newline"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nfunction foo(bar,\n              baz,\n              quux) {\n  // ...\n}\n\n// good\nfunction foo(\n  bar,\n  baz,\n  quux,\n) {\n  // ...\n}\n\n// bad\nconsole.log(foo,\n  bar,\n  baz);\n\n// good\nconsole.log(\n  foo,\n  bar,\n  baz,\n);\n")))),(0,r.kt)("h2",{id:"arrow-functions"},"Arrow Functions"),(0,r.kt)("a",{name:"arrows--use-them"}),(0,r.kt)("a",{name:"8.1"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#arrows--use-them"},"8.1")," When you must use an anonymous function (as when passing an inline callback), use arrow function notation. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/prefer-arrow-callback"},(0,r.kt)("inlineCode",{parentName:"a"},"prefer-arrow-callback")),", ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/arrow-spacing"},(0,r.kt)("inlineCode",{parentName:"a"},"arrow-spacing"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? It creates a version of the function that executes in the context of ",(0,r.kt)("inlineCode",{parentName:"p"},"this"),", which is usually what you want, and is a more concise syntax.")),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why not? If you have a fairly complicated function, you might move that logic out into its own named function expression.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\n[1, 2, 3].map(function (x) {\n  const y = x + 1;\n  return x * y;\n});\n\n// good\n[1, 2, 3].map((x) => {\n  const y = x + 1;\n  return x * y;\n});\n")))),(0,r.kt)("a",{name:"arrows--implicit-return"}),(0,r.kt)("a",{name:"8.2"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#arrows--implicit-return"},"8.2")," If the function body consists of a single statement returning an ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions"},"expression")," without side effects, omit the braces and use the implicit return. Otherwise, keep the braces and use a ",(0,r.kt)("inlineCode",{parentName:"p"},"return")," statement. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/arrow-parens"},(0,r.kt)("inlineCode",{parentName:"a"},"arrow-parens")),", ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/arrow-body-style"},(0,r.kt)("inlineCode",{parentName:"a"},"arrow-body-style"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? Syntactic sugar. It reads well when multiple functions are chained together.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\n[1, 2, 3].map((number) => {\n  const nextNumber = number + 1;\n  `A string containing the ${nextNumber}.`;\n});\n\n// good\n[1, 2, 3].map((number) => `A string containing the ${number + 1}.`);\n\n// good\n[1, 2, 3].map((number) => {\n  const nextNumber = number + 1;\n  return `A string containing the ${nextNumber}.`;\n});\n\n// good\n[1, 2, 3].map((number, index) => ({\n  [index]: number,\n}));\n\n// No implicit return with side effects\nfunction foo(callback) {\n  const val = callback();\n  if (val === true) {\n    // Do something if callback returns true\n  }\n}\n\nlet bool = false;\n\n// bad\nfoo(() => bool = true);\n\n// good\nfoo(() => {\n  bool = true;\n});\n")))),(0,r.kt)("a",{name:"arrows--paren-wrap"}),(0,r.kt)("a",{name:"8.3"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#arrows--paren-wrap"},"8.3")," In case the expression spans over multiple lines, wrap it in parentheses for better readability."),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? It shows clearly where the function starts and ends.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\n['get', 'post', 'put'].map((httpMethod) => Object.prototype.hasOwnProperty.call(\n    httpMagicObjectWithAVeryLongName,\n    httpMethod,\n  )\n);\n\n// good\n['get', 'post', 'put'].map((httpMethod) => (\n  Object.prototype.hasOwnProperty.call(\n    httpMagicObjectWithAVeryLongName,\n    httpMethod,\n  )\n));\n")))),(0,r.kt)("a",{name:"arrows--one-arg-parens"}),(0,r.kt)("a",{name:"8.4"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#arrows--one-arg-parens"},"8.4")," Always include parentheses around arguments for clarity and consistency. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/arrow-parens"},(0,r.kt)("inlineCode",{parentName:"a"},"arrow-parens"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? Minimizes diff churn when adding or removing arguments.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\n[1, 2, 3].map(x => x * x);\n\n// good\n[1, 2, 3].map((x) => x * x);\n\n// bad\n[1, 2, 3].map(number => (\n  `A long string with the ${number}. It\u2019s so long that we don\u2019t want it to take up space on the .map line!`\n));\n\n// good\n[1, 2, 3].map((number) => (\n  `A long string with the ${number}. It\u2019s so long that we don\u2019t want it to take up space on the .map line!`\n));\n\n// bad\n[1, 2, 3].map(x => {\n  const y = x + 1;\n  return x * y;\n});\n\n// good\n[1, 2, 3].map((x) => {\n  const y = x + 1;\n  return x * y;\n});\n")))),(0,r.kt)("a",{name:"arrows--confusing"}),(0,r.kt)("a",{name:"8.5"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#arrows--confusing"},"8.5")," Avoid confusing arrow function syntax (",(0,r.kt)("inlineCode",{parentName:"p"},"=>"),") with comparison operators (",(0,r.kt)("inlineCode",{parentName:"p"},"<="),", ",(0,r.kt)("inlineCode",{parentName:"p"},">="),"). eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-confusing-arrow"},(0,r.kt)("inlineCode",{parentName:"a"},"no-confusing-arrow"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst itemHeight = (item) => item.height <= 256 ? item.largeSize : item.smallSize;\n\n// bad\nconst itemHeight = (item) => item.height >= 256 ? item.largeSize : item.smallSize;\n\n// good\nconst itemHeight = (item) => (item.height <= 256 ? item.largeSize : item.smallSize);\n\n// good\nconst itemHeight = (item) => {\n  const { height, largeSize, smallSize } = item;\n  return height <= 256 ? largeSize : smallSize;\n};\n")))),(0,r.kt)("a",{name:"whitespace--implicit-arrow-linebreak"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#whitespace--implicit-arrow-linebreak"},"8.6")," Enforce the location of arrow function bodies with implicit returns. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/implicit-arrow-linebreak"},(0,r.kt)("inlineCode",{parentName:"a"},"implicit-arrow-linebreak"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\n(foo) =>\n  bar;\n\n(foo) =>\n  (bar);\n\n// good\n(foo) => bar;\n(foo) => (bar);\n(foo) => (\n    bar\n)\n")))),(0,r.kt)("h2",{id:"classes--constructors"},"Classes & Constructors"),(0,r.kt)("a",{name:"constructors--use-class"}),(0,r.kt)("a",{name:"9.1"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#constructors--use-class"},"9.1")," Always use ",(0,r.kt)("inlineCode",{parentName:"p"},"class"),". Avoid manipulating ",(0,r.kt)("inlineCode",{parentName:"p"},"prototype")," directly."),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? ",(0,r.kt)("inlineCode",{parentName:"p"},"class")," syntax is more concise and easier to reason about.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nfunction Queue(contents = []) {\n  this.queue = [...contents];\n}\nQueue.prototype.pop = function () {\n  const value = this.queue[0];\n  this.queue.splice(0, 1);\n  return value;\n};\n\n// good\nclass Queue {\n  constructor(contents = []) {\n    this.queue = [...contents];\n  }\n  pop() {\n    const value = this.queue[0];\n    this.queue.splice(0, 1);\n    return value;\n  }\n}\n")))),(0,r.kt)("a",{name:"constructors--extends"}),(0,r.kt)("a",{name:"9.2"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#constructors--extends"},"9.2")," Use ",(0,r.kt)("inlineCode",{parentName:"p"},"extends")," for inheritance."),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? It is a built-in way to inherit prototype functionality without breaking ",(0,r.kt)("inlineCode",{parentName:"p"},"instanceof"),".")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst inherits = require('inherits');\nfunction PeekableQueue(contents) {\n  Queue.apply(this, contents);\n}\ninherits(PeekableQueue, Queue);\nPeekableQueue.prototype.peek = function () {\n  return this.queue[0];\n};\n\n// good\nclass PeekableQueue extends Queue {\n  peek() {\n    return this.queue[0];\n  }\n}\n")))),(0,r.kt)("a",{name:"constructors--chaining"}),(0,r.kt)("a",{name:"9.3"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#constructors--chaining"},"9.3")," Methods can return ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," to help with method chaining."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nJedi.prototype.jump = function () {\n  this.jumping = true;\n  return true;\n};\n\nJedi.prototype.setHeight = function (height) {\n  this.height = height;\n};\n\nconst luke = new Jedi();\nluke.jump(); // => true\nluke.setHeight(20); // => undefined\n\n// good\nclass Jedi {\n  jump() {\n    this.jumping = true;\n    return this;\n  }\n\n  setHeight(height) {\n    this.height = height;\n    return this;\n  }\n}\n\nconst luke = new Jedi();\n\nluke.jump()\n  .setHeight(20);\n")))),(0,r.kt)("a",{name:"constructors--tostring"}),(0,r.kt)("a",{name:"9.4"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#constructors--tostring"},"9.4")," It\u2019s okay to write a custom ",(0,r.kt)("inlineCode",{parentName:"p"},"toString()")," method, just make sure it works successfully and causes no side effects."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"class Jedi {\n  constructor(options = {}) {\n    this.name = options.name || 'no name';\n  }\n\n  getName() {\n    return this.name;\n  }\n\n  toString() {\n    return `Jedi - ${this.getName()}`;\n  }\n}\n")))),(0,r.kt)("a",{name:"constructors--no-useless"}),(0,r.kt)("a",{name:"9.5"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#constructors--no-useless"},"9.5")," Classes have a default constructor if one is not specified. An empty constructor function or one that just delegates to a parent class is unnecessary. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-useless-constructor"},(0,r.kt)("inlineCode",{parentName:"a"},"no-useless-constructor"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nclass Jedi {\n  constructor() {}\n\n  getName() {\n    return this.name;\n  }\n}\n\n// bad\nclass Rey extends Jedi {\n  constructor(...args) {\n    super(...args);\n  }\n}\n\n// good\nclass Rey extends Jedi {\n  constructor(...args) {\n    super(...args);\n    this.name = 'Rey';\n  }\n}\n")))),(0,r.kt)("a",{name:"classes--no-duplicate-members"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#classes--no-duplicate-members"},"9.6")," Avoid duplicate class members. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-dupe-class-members"},(0,r.kt)("inlineCode",{parentName:"a"},"no-dupe-class-members"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? Duplicate class member declarations will silently prefer the last one - having duplicates is almost certainly a bug.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nclass Foo {\n  bar() { return 1; }\n  bar() { return 2; }\n}\n\n// good\nclass Foo {\n  bar() { return 1; }\n}\n\n// good\nclass Foo {\n  bar() { return 2; }\n}\n")))),(0,r.kt)("a",{name:"classes--methods-use-this"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#classes--methods-use-this"},"9.7")," Class methods should use ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," or be made into a static method unless an external library or framework requires using specific non-static methods. Being an instance method should indicate that it behaves differently based on properties of the receiver. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/class-methods-use-this"},(0,r.kt)("inlineCode",{parentName:"a"},"class-methods-use-this"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nclass Foo {\n  bar() {\n    console.log('bar');\n  }\n}\n\n// good - this is used\nclass Foo {\n  bar() {\n    console.log(this.bar);\n  }\n}\n\n// good - constructor is exempt\nclass Foo {\n  constructor() {\n    // ...\n  }\n}\n\n// good - static methods aren't expected to use this\nclass Foo {\n  static bar() {\n    console.log('bar');\n  }\n}\n")))),(0,r.kt)("h2",{id:"modules"},"Modules"),(0,r.kt)("a",{name:"modules--use-them"}),(0,r.kt)("a",{name:"10.1"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#modules--use-them"},"10.1")," Always use modules (",(0,r.kt)("inlineCode",{parentName:"p"},"import"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"export"),") over a non-standard module system. You can always transpile to your preferred module system."),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? Modules are the future, let\u2019s start using the future now.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst AirbnbStyleGuide = require('./AirbnbStyleGuide');\nmodule.exports = AirbnbStyleGuide.es6;\n\n// ok\nimport AirbnbStyleGuide from './AirbnbStyleGuide';\nexport default AirbnbStyleGuide.es6;\n\n// best\nimport { es6 } from './AirbnbStyleGuide';\nexport default es6;\n")))),(0,r.kt)("a",{name:"modules--no-wildcard"}),(0,r.kt)("a",{name:"10.2"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#modules--no-wildcard"},"10.2")," Do not use wildcard imports."),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? This makes sure you have a single default export.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nimport * as AirbnbStyleGuide from './AirbnbStyleGuide';\n\n// good\nimport AirbnbStyleGuide from './AirbnbStyleGuide';\n")))),(0,r.kt)("a",{name:"modules--no-export-from-import"}),(0,r.kt)("a",{name:"10.3"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#modules--no-export-from-import"},"10.3")," And do not export directly from an import."),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? Although the one-liner is concise, having one clear way to import and one clear way to export makes things consistent.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\n// filename es6.js\nexport { es6 as default } from './AirbnbStyleGuide';\n\n// good\n// filename es6.js\nimport { es6 } from './AirbnbStyleGuide';\nexport default es6;\n")))),(0,r.kt)("a",{name:"modules--no-duplicate-imports"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#modules--no-duplicate-imports"},"10.4")," Only import from a path in one place.\neslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-duplicate-imports"},(0,r.kt)("inlineCode",{parentName:"a"},"no-duplicate-imports"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? Having multiple lines that import from the same path can make code harder to maintain.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nimport foo from 'foo';\n// \u2026 some other imports \u2026 //\nimport { named1, named2 } from 'foo';\n\n// good\nimport foo, { named1, named2 } from 'foo';\n\n// good\nimport foo, {\n  named1,\n  named2,\n} from 'foo';\n")))),(0,r.kt)("a",{name:"modules--no-mutable-exports"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#modules--no-mutable-exports"},"10.5")," Do not export mutable bindings.\neslint: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-mutable-exports.md"},(0,r.kt)("inlineCode",{parentName:"a"},"import/no-mutable-exports"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? Mutation should be avoided in general, but in particular when exporting mutable bindings. While this technique may be needed for some special cases, in general, only constant references should be exported.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nlet foo = 3;\nexport { foo };\n\n// good\nconst foo = 3;\nexport { foo };\n")))),(0,r.kt)("a",{name:"modules--prefer-default-export"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#modules--prefer-default-export"},"10.6")," In modules with a single export, prefer default export over named export.\neslint: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/prefer-default-export.md"},(0,r.kt)("inlineCode",{parentName:"a"},"import/prefer-default-export"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? To encourage more files that only ever export one thing, which is better for readability and maintainability.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nexport function foo() {}\n\n// good\nexport default function foo() {}\n")))),(0,r.kt)("a",{name:"modules--imports-first"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#modules--imports-first"},"10.7")," Put all ",(0,r.kt)("inlineCode",{parentName:"p"},"import"),"s above non-import statements.\neslint: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/first.md"},(0,r.kt)("inlineCode",{parentName:"a"},"import/first"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? Since ",(0,r.kt)("inlineCode",{parentName:"p"},"import"),"s are hoisted, keeping them all at the top prevents surprising behavior.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nimport foo from 'foo';\nfoo.init();\n\nimport bar from 'bar';\n\n// good\nimport foo from 'foo';\nimport bar from 'bar';\n\nfoo.init();\n")))),(0,r.kt)("a",{name:"modules--multiline-imports-over-newlines"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#modules--multiline-imports-over-newlines"},"10.8")," Multiline imports should be indented just like multiline array and object literals.\neslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/object-curly-newline"},(0,r.kt)("inlineCode",{parentName:"a"},"object-curly-newline"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? The curly braces follow the same indentation rules as every other curly brace block in the style guide, as do the trailing commas.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nimport {longNameA, longNameB, longNameC, longNameD, longNameE} from 'path';\n\n// good\nimport {\n  longNameA,\n  longNameB,\n  longNameC,\n  longNameD,\n  longNameE,\n} from 'path';\n")))),(0,r.kt)("a",{name:"modules--no-webpack-loader-syntax"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#modules--no-webpack-loader-syntax"},"10.9")," Disallow Webpack loader syntax in module import statements.\neslint: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-webpack-loader-syntax.md"},(0,r.kt)("inlineCode",{parentName:"a"},"import/no-webpack-loader-syntax"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? Since using Webpack syntax in the imports couples the code to a module bundler. Prefer using the loader syntax in ",(0,r.kt)("inlineCode",{parentName:"p"},"webpack.config.js"),".")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nimport fooSass from 'css!sass!foo.scss';\nimport barCss from 'style!css!bar.css';\n\n// good\nimport fooSass from 'foo.scss';\nimport barCss from 'bar.css';\n")))),(0,r.kt)("a",{name:"modules--import-extensions"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#modules--import-extensions"},"10.10")," Do not include JavaScript filename extensions\neslint: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/extensions.md"},(0,r.kt)("inlineCode",{parentName:"a"},"import/extensions"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? Including extensions inhibits refactoring, and inappropriately hardcodes implementation details of the module you're importing in every consumer.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nimport foo from './foo.js';\nimport bar from './bar.jsx';\nimport baz from './baz/index.jsx';\n\n// good\nimport foo from './foo';\nimport bar from './bar';\nimport baz from './baz';\n")))),(0,r.kt)("h2",{id:"iterators-and-generators"},"Iterators and Generators"),(0,r.kt)("a",{name:"iterators--nope"}),(0,r.kt)("a",{name:"11.1"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#iterators--nope"},"11.1")," Don\u2019t use iterators. Prefer JavaScript\u2019s higher-order functions instead of loops like ",(0,r.kt)("inlineCode",{parentName:"p"},"for-in")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"for-of"),". eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-iterator"},(0,r.kt)("inlineCode",{parentName:"a"},"no-iterator"))," ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-restricted-syntax"},(0,r.kt)("inlineCode",{parentName:"a"},"no-restricted-syntax"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? This enforces our immutable rule. Dealing with pure functions that return values is easier to reason about than side effects.")),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Use ",(0,r.kt)("inlineCode",{parentName:"p"},"map()")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"every()")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"filter()")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"find()")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"findIndex()")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"reduce()")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"some()")," / ... to iterate over arrays, and ",(0,r.kt)("inlineCode",{parentName:"p"},"Object.keys()")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"Object.values()")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"Object.entries()")," to produce arrays so you can iterate over objects.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const numbers = [1, 2, 3, 4, 5];\n\n// bad\nlet sum = 0;\nfor (let num of numbers) {\n  sum += num;\n}\nsum === 15;\n\n// good\nlet sum = 0;\nnumbers.forEach((num) => {\n  sum += num;\n});\nsum === 15;\n\n// best (use the functional force)\nconst sum = numbers.reduce((total, num) => total + num, 0);\nsum === 15;\n\n// bad\nconst increasedByOne = [];\nfor (let i = 0; i < numbers.length; i++) {\n  increasedByOne.push(numbers[i] + 1);\n}\n\n// good\nconst increasedByOne = [];\nnumbers.forEach((num) => {\n  increasedByOne.push(num + 1);\n});\n\n// best (keeping it functional)\nconst increasedByOne = numbers.map((num) => num + 1);\n")))),(0,r.kt)("a",{name:"generators--nope"}),(0,r.kt)("a",{name:"11.2"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#generators--nope"},"11.2")," Don\u2019t use generators for now."),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? They don\u2019t transpile well to ES5.")))),(0,r.kt)("a",{name:"generators--spacing"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#generators--spacing"},"11.3")," If you must use generators, or if you disregard ",(0,r.kt)("a",{parentName:"p",href:"#generators--nope"},"our advice"),", make sure their function signature is spaced properly. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/generator-star-spacing"},(0,r.kt)("inlineCode",{parentName:"a"},"generator-star-spacing"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? ",(0,r.kt)("inlineCode",{parentName:"p"},"function")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," are part of the same conceptual keyword - ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," is not a modifier for ",(0,r.kt)("inlineCode",{parentName:"p"},"function"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"function*")," is a unique construct, different from ",(0,r.kt)("inlineCode",{parentName:"p"},"function"),".")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nfunction * foo() {\n  // ...\n}\n\n// bad\nconst bar = function * () {\n  // ...\n};\n\n// bad\nconst baz = function *() {\n  // ...\n};\n\n// bad\nconst quux = function*() {\n  // ...\n};\n\n// bad\nfunction*foo() {\n  // ...\n}\n\n// bad\nfunction *foo() {\n  // ...\n}\n\n// very bad\nfunction\n*\nfoo() {\n  // ...\n}\n\n// very bad\nconst wat = function\n*\n() {\n  // ...\n};\n\n// good\nfunction* foo() {\n  // ...\n}\n\n// good\nconst foo = function* () {\n  // ...\n};\n")))),(0,r.kt)("h2",{id:"properties"},"Properties"),(0,r.kt)("a",{name:"properties--dot"}),(0,r.kt)("a",{name:"12.1"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#properties--dot"},"12.1")," Use dot notation when accessing properties. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/dot-notation"},(0,r.kt)("inlineCode",{parentName:"a"},"dot-notation"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const luke = {\n  jedi: true,\n  age: 28,\n};\n\n// bad\nconst isJedi = luke['jedi'];\n\n// good\nconst isJedi = luke.jedi;\n")))),(0,r.kt)("a",{name:"properties--bracket"}),(0,r.kt)("a",{name:"12.2"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#properties--bracket"},"12.2")," Use bracket notation ",(0,r.kt)("inlineCode",{parentName:"p"},"[]")," when accessing properties with a variable."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"const luke = {\n  jedi: true,\n  age: 28,\n};\n\nfunction getProp(prop) {\n  return luke[prop];\n}\n\nconst isJedi = getProp('jedi');\n")))),(0,r.kt)("a",{name:"es2016-properties--exponentiation-operator"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#es2016-properties--exponentiation-operator"},"12.3")," Use exponentiation operator ",(0,r.kt)("inlineCode",{parentName:"p"},"**")," when calculating exponentiations. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-restricted-properties"},(0,r.kt)("inlineCode",{parentName:"a"},"no-restricted-properties")),"."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst binary = Math.pow(2, 10);\n\n// good\nconst binary = 2 ** 10;\n")))),(0,r.kt)("h2",{id:"variables"},"Variables"),(0,r.kt)("a",{name:"variables--const"}),(0,r.kt)("a",{name:"13.1"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#variables--const"},"13.1")," Always use ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," to declare variables. Not doing so will result in global variables. We want to avoid polluting the global namespace. Captain Planet warned us of that. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-undef"},(0,r.kt)("inlineCode",{parentName:"a"},"no-undef"))," ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/prefer-const"},(0,r.kt)("inlineCode",{parentName:"a"},"prefer-const"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nsuperPower = new SuperPower();\n\n// good\nconst superPower = new SuperPower();\n")))),(0,r.kt)("a",{name:"variables--one-const"}),(0,r.kt)("a",{name:"13.2"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#variables--one-const"},"13.2")," Use one ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," declaration per variable or assignment. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/one-var"},(0,r.kt)("inlineCode",{parentName:"a"},"one-var"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? It\u2019s easier to add new variable declarations this way, and you never have to worry about swapping out a ",(0,r.kt)("inlineCode",{parentName:"p"},";")," for a ",(0,r.kt)("inlineCode",{parentName:"p"},",")," or introducing punctuation-only diffs. You can also step through each declaration with the debugger, instead of jumping through all of them at once.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst items = getItems(),\n    goSportsTeam = true,\n    dragonball = 'z';\n\n// bad\n// (compare to above, and try to spot the mistake)\nconst items = getItems(),\n    goSportsTeam = true;\n    dragonball = 'z';\n\n// good\nconst items = getItems();\nconst goSportsTeam = true;\nconst dragonball = 'z';\n")))),(0,r.kt)("a",{name:"variables--const-let-group"}),(0,r.kt)("a",{name:"13.3"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#variables--const-let-group"},"13.3")," Group all your ",(0,r.kt)("inlineCode",{parentName:"p"},"const"),"s and then group all your ",(0,r.kt)("inlineCode",{parentName:"p"},"let"),"s."),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? This is helpful when later on you might need to assign a variable depending on one of the previously assigned variables.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nlet i, len, dragonball,\n    items = getItems(),\n    goSportsTeam = true;\n\n// bad\nlet i;\nconst items = getItems();\nlet dragonball;\nconst goSportsTeam = true;\nlet len;\n\n// good\nconst goSportsTeam = true;\nconst items = getItems();\nlet dragonball;\nlet i;\nlet length;\n")))),(0,r.kt)("a",{name:"variables--define-where-used"}),(0,r.kt)("a",{name:"13.4"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#variables--define-where-used"},"13.4")," Assign variables where you need them, but place them in a reasonable place."),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," are block scoped and not function scoped.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad - unnecessary function call\nfunction checkName(hasName) {\n  const name = getName();\n\n  if (hasName === 'test') {\n    return false;\n  }\n\n  if (name === 'test') {\n    this.setName('');\n    return false;\n  }\n\n  return name;\n}\n\n// good\nfunction checkName(hasName) {\n  if (hasName === 'test') {\n    return false;\n  }\n\n  const name = getName();\n\n  if (name === 'test') {\n    this.setName('');\n    return false;\n  }\n\n  return name;\n}\n")))),(0,r.kt)("a",{name:"variables--no-chain-assignment"}),(0,r.kt)("a",{name:"13.5"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#variables--no-chain-assignment"},"13.5")," Don\u2019t chain variable assignments. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-multi-assign"},(0,r.kt)("inlineCode",{parentName:"a"},"no-multi-assign"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? Chaining variable assignments creates implicit global variables.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\n(function example() {\n  // JavaScript interprets this as\n  // let a = ( b = ( c = 1 ) );\n  // The let keyword only applies to variable a; variables b and c become\n  // global variables.\n  let a = b = c = 1;\n}());\n\nconsole.log(a); // throws ReferenceError\nconsole.log(b); // 1\nconsole.log(c); // 1\n\n// good\n(function example() {\n  let a = 1;\n  let b = a;\n  let c = a;\n}());\n\nconsole.log(a); // throws ReferenceError\nconsole.log(b); // throws ReferenceError\nconsole.log(c); // throws ReferenceError\n\n// the same applies for `const`\n")))),(0,r.kt)("a",{name:"variables--unary-increment-decrement"}),(0,r.kt)("a",{name:"13.6"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#variables--unary-increment-decrement"},"13.6")," Avoid using unary increments and decrements (",(0,r.kt)("inlineCode",{parentName:"p"},"++"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"--"),"). eslint ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-plusplus"},(0,r.kt)("inlineCode",{parentName:"a"},"no-plusplus"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? Per the eslint documentation, unary increment and decrement statements are subject to automatic semicolon insertion and can cause silent errors with incrementing or decrementing values within an application. It is also more expressive to mutate your values with statements like ",(0,r.kt)("inlineCode",{parentName:"p"},"num += 1")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"num++")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"num ++"),". Disallowing unary increment and decrement statements also prevents you from pre-incrementing/pre-decrementing values unintentionally which can also cause unexpected behavior in your programs.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\n\nconst array = [1, 2, 3];\nlet num = 1;\nnum++;\n--num;\n\nlet sum = 0;\nlet truthyCount = 0;\nfor (let i = 0; i < array.length; i++) {\n  let value = array[i];\n  sum += value;\n  if (value) {\n    truthyCount++;\n  }\n}\n\n// good\n\nconst array = [1, 2, 3];\nlet num = 1;\nnum += 1;\nnum -= 1;\n\nconst sum = array.reduce((a, b) => a + b, 0);\nconst truthyCount = array.filter(Boolean).length;\n")))),(0,r.kt)("a",{name:"variables--linebreak"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#variables--linebreak"},"13.7")," Avoid linebreaks before or after ",(0,r.kt)("inlineCode",{parentName:"p"},"=")," in an assignment. If your assignment violates ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/max-len"},(0,r.kt)("inlineCode",{parentName:"a"},"max-len")),", surround the value in parens. eslint ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/operator-linebreak"},(0,r.kt)("inlineCode",{parentName:"a"},"operator-linebreak")),"."),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? Linebreaks surrounding ",(0,r.kt)("inlineCode",{parentName:"p"},"=")," can obfuscate the value of an assignment.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst foo =\n  superLongLongLongLongLongLongLongLongFunctionName();\n\n// bad\nconst foo\n  = 'superLongLongLongLongLongLongLongLongString';\n\n// good\nconst foo = (\n  superLongLongLongLongLongLongLongLongFunctionName()\n);\n\n// good\nconst foo = 'superLongLongLongLongLongLongLongLongString';\n")))),(0,r.kt)("a",{name:"variables--no-unused-vars"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#variables--no-unused-vars"},"13.8")," Disallow unused variables. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-unused-vars"},(0,r.kt)("inlineCode",{parentName:"a"},"no-unused-vars"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? Variables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\n\nconst some_unused_var = 42;\n\n// Write-only variables are not considered as used.\nlet y = 10;\ny = 5;\n\n// A read for a modification of itself is not considered as used.\nlet z = 0;\nz = z + 1;\n\n// Unused function arguments.\nfunction getX(x, y) {\n    return x;\n}\n\n// good\n\nfunction getXPlusY(x, y) {\n  return x + y;\n}\n\nconst x = 1;\nconst y = a + 2;\n\nalert(getXPlusY(x, y));\n\n// 'type' is ignored even if unused because it has a rest property sibling.\n// This is a form of extracting an object that omits the specified keys.\nconst { type, ...coords } = data;\n// 'coords' is now the 'data' object without its 'type' property.\n")))),(0,r.kt)("h2",{id:"hoisting"},"Hoisting"),(0,r.kt)("a",{name:"hoisting--about"}),(0,r.kt)("a",{name:"14.1"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#hoisting--about"},"14.1")," ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," declarations get hoisted to the top of their closest enclosing function scope, their assignment does not. ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," declarations are blessed with a new concept called ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#temporal_dead_zone_tdz"},"Temporal Dead Zones (TDZ)"),". It\u2019s important to know why ",(0,r.kt)("a",{parentName:"p",href:"https://web.archive.org/web/20200121061528/http://es-discourse.com/t/why-typeof-is-no-longer-safe/15"},"typeof is no longer safe"),"."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// we know this wouldn\u2019t work (assuming there\n// is no notDefined global variable)\nfunction example() {\n  console.log(notDefined); // => throws a ReferenceError\n}\n\n// creating a variable declaration after you\n// reference the variable will work due to\n// variable hoisting. Note: the assignment\n// value of `true` is not hoisted.\nfunction example() {\n  console.log(declaredButNotAssigned); // => undefined\n  var declaredButNotAssigned = true;\n}\n\n// the interpreter is hoisting the variable\n// declaration to the top of the scope,\n// which means our example could be rewritten as:\nfunction example() {\n  let declaredButNotAssigned;\n  console.log(declaredButNotAssigned); // => undefined\n  declaredButNotAssigned = true;\n}\n\n// using const and let\nfunction example() {\n  console.log(declaredButNotAssigned); // => throws a ReferenceError\n  console.log(typeof declaredButNotAssigned); // => throws a ReferenceError\n  const declaredButNotAssigned = true;\n}\n")))),(0,r.kt)("a",{name:"hoisting--anon-expressions"}),(0,r.kt)("a",{name:"14.2"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#hoisting--anon-expressions"},"14.2")," Anonymous function expressions hoist their variable name, but not the function assignment."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"function example() {\n  console.log(anonymous); // => undefined\n\n  anonymous(); // => TypeError anonymous is not a function\n\n  var anonymous = function () {\n    console.log('anonymous function expression');\n  };\n}\n")))),(0,r.kt)("a",{name:"hoisting--named-expresions"}),(0,r.kt)("a",{name:"hoisting--named-expressions"}),(0,r.kt)("a",{name:"14.3"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#hoisting--named-expressions"},"14.3")," Named function expressions hoist the variable name, not the function name or the function body."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"function example() {\n  console.log(named); // => undefined\n\n  named(); // => TypeError named is not a function\n\n  superPower(); // => ReferenceError superPower is not defined\n\n  var named = function superPower() {\n    console.log('Flying');\n  };\n}\n\n// the same is true when the function name\n// is the same as the variable name.\nfunction example() {\n  console.log(named); // => undefined\n\n  named(); // => TypeError named is not a function\n\n  var named = function named() {\n    console.log('named');\n  };\n}\n")))),(0,r.kt)("a",{name:"hoisting--declarations"}),(0,r.kt)("a",{name:"14.4"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#hoisting--declarations"},"14.4")," Function declarations hoist their name and the function body."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"function example() {\n  superPower(); // => Flying\n\n  function superPower() {\n    console.log('Flying');\n  }\n}\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"For more information refer to ",(0,r.kt)("a",{parentName:"p",href:"https://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting/"},"JavaScript Scoping & Hoisting")," by ",(0,r.kt)("a",{parentName:"p",href:"https://www.adequatelygood.com/"},"Ben Cherry"),"."))),(0,r.kt)("h2",{id:"comparison-operators--equality"},"Comparison Operators & Equality"),(0,r.kt)("a",{name:"comparison--eqeqeq"}),(0,r.kt)("a",{name:"15.1"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#comparison--eqeqeq"},"15.1")," Use ",(0,r.kt)("inlineCode",{parentName:"li"},"===")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"!==")," over ",(0,r.kt)("inlineCode",{parentName:"li"},"==")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"!="),". eslint: ",(0,r.kt)("a",{parentName:"li",href:"https://eslint.org/docs/rules/eqeqeq"},(0,r.kt)("inlineCode",{parentName:"a"},"eqeqeq")))),(0,r.kt)("a",{name:"comparison--if"}),(0,r.kt)("a",{name:"15.2"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#comparison--if"},"15.2")," Conditional statements such as the ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," statement evaluate their expression using coercion with the ",(0,r.kt)("inlineCode",{parentName:"p"},"ToBoolean")," abstract method and always follow these simple rules:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Objects")," evaluate to ",(0,r.kt)("strong",{parentName:"li"},"true")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Undefined")," evaluates to ",(0,r.kt)("strong",{parentName:"li"},"false")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Null")," evaluates to ",(0,r.kt)("strong",{parentName:"li"},"false")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Booleans")," evaluate to ",(0,r.kt)("strong",{parentName:"li"},"the value of the boolean")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Numbers")," evaluate to ",(0,r.kt)("strong",{parentName:"li"},"false")," if ",(0,r.kt)("strong",{parentName:"li"},"+0, -0, or NaN"),", otherwise ",(0,r.kt)("strong",{parentName:"li"},"true")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Strings")," evaluate to ",(0,r.kt)("strong",{parentName:"li"},"false")," if an empty string ",(0,r.kt)("inlineCode",{parentName:"li"},"''"),", otherwise ",(0,r.kt)("strong",{parentName:"li"},"true"))),(0,r.kt)("br",null),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"if ([0] && []) {\n  // true\n  // an array (even an empty one) is an object, objects will evaluate to true\n}\n")))),(0,r.kt)("a",{name:"comparison--shortcuts"}),(0,r.kt)("a",{name:"15.3"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#comparison--shortcuts"},"15.3")," Use shortcuts for booleans, but explicit comparisons for strings and numbers."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nif (isValid === true) {\n  // ...\n}\n\n// good\nif (isValid) {\n  // ...\n}\n\n// bad\nif (name) {\n  // ...\n}\n\n// good\nif (name !== '') {\n  // ...\n}\n\n// bad\nif (collection.length) {\n  // ...\n}\n\n// good\nif (collection.length > 0) {\n  // ...\n}\n")))),(0,r.kt)("a",{name:"comparison--moreinfo"}),(0,r.kt)("a",{name:"15.4"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#comparison--moreinfo"},"15.4")," For more information see ",(0,r.kt)("a",{parentName:"li",href:"https://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108"},"Truth Equality and JavaScript")," by Angus Croll.")),(0,r.kt)("a",{name:"comparison--switch-blocks"}),(0,r.kt)("a",{name:"15.5"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#comparison--switch-blocks"},"15.5")," Use braces to create blocks in ",(0,r.kt)("inlineCode",{parentName:"p"},"case")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," clauses that contain lexical declarations (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"let"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"const"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"function"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"class"),"). eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-case-declarations"},(0,r.kt)("inlineCode",{parentName:"a"},"no-case-declarations"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? Lexical declarations are visible in the entire ",(0,r.kt)("inlineCode",{parentName:"p"},"switch")," block but only get initialized when assigned, which only happens when its ",(0,r.kt)("inlineCode",{parentName:"p"},"case")," is reached. This causes problems when multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"case")," clauses attempt to define the same thing.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nswitch (foo) {\n  case 1:\n    let x = 1;\n    break;\n  case 2:\n    const y = 2;\n    break;\n  case 3:\n    function f() {\n      // ...\n    }\n    break;\n  default:\n    class C {}\n}\n\n// good\nswitch (foo) {\n  case 1: {\n    let x = 1;\n    break;\n  }\n  case 2: {\n    const y = 2;\n    break;\n  }\n  case 3: {\n    function f() {\n      // ...\n    }\n    break;\n  }\n  case 4:\n    bar();\n    break;\n  default: {\n    class C {}\n  }\n}\n")))),(0,r.kt)("a",{name:"comparison--nested-ternaries"}),(0,r.kt)("a",{name:"15.6"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#comparison--nested-ternaries"},"15.6")," Ternaries should not be nested and generally be single line expressions. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-nested-ternary"},(0,r.kt)("inlineCode",{parentName:"a"},"no-nested-ternary"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst foo = maybe1 > maybe2\n  ? \"bar\"\n  : value1 > value2 ? \"baz\" : null;\n\n// split into 2 separated ternary expressions\nconst maybeNull = value1 > value2 ? 'baz' : null;\n\n// better\nconst foo = maybe1 > maybe2\n  ? 'bar'\n  : maybeNull;\n\n// best\nconst foo = maybe1 > maybe2 ? 'bar' : maybeNull;\n")))),(0,r.kt)("a",{name:"comparison--unneeded-ternary"}),(0,r.kt)("a",{name:"15.7"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#comparison--unneeded-ternary"},"15.7")," Avoid unneeded ternary statements. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-unneeded-ternary"},(0,r.kt)("inlineCode",{parentName:"a"},"no-unneeded-ternary"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst foo = a ? a : b;\nconst bar = c ? true : false;\nconst baz = c ? false : true;\nconst quux = a != null ? a : b;\n\n// good\nconst foo = a || b;\nconst bar = !!c;\nconst baz = !c;\nconst quux = a ?? b;\n")))),(0,r.kt)("a",{name:"comparison--no-mixed-operators"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#comparison--no-mixed-operators"},"15.8")," When mixing operators, enclose them in parentheses. The only exception is the standard arithmetic operators: ",(0,r.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"-"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"**")," since their precedence is broadly understood. We recommend enclosing ",(0,r.kt)("inlineCode",{parentName:"p"},"/")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," in parentheses because their precedence can be ambiguous when they are mixed.\neslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-mixed-operators"},(0,r.kt)("inlineCode",{parentName:"a"},"no-mixed-operators"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? This improves readability and clarifies the developer\u2019s intention.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst foo = a && b < 0 || c > 0 || d + 1 === 0;\n\n// bad\nconst bar = a ** b - 5 % d;\n\n// bad\n// one may be confused into thinking (a || b) && c\nif (a || b && c) {\n  return d;\n}\n\n// bad\nconst bar = a + b / c * d;\n\n// good\nconst foo = (a && b < 0) || c > 0 || (d + 1 === 0);\n\n// good\nconst bar = a ** b - (5 % d);\n\n// good\nif (a || (b && c)) {\n  return d;\n}\n\n// good\nconst bar = a + (b / c) * d;\n")))),(0,r.kt)("h2",{id:"blocks"},"Blocks"),(0,r.kt)("a",{name:"blocks--braces"}),(0,r.kt)("a",{name:"16.1"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#blocks--braces"},"16.1")," Use braces with all multiline blocks. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/nonblock-statement-body-position"},(0,r.kt)("inlineCode",{parentName:"a"},"nonblock-statement-body-position"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nif (test)\n  return false;\n\n// good\nif (test) return false;\n\n// good\nif (test) {\n  return false;\n}\n\n// bad\nfunction foo() { return false; }\n\n// good\nfunction bar() {\n  return false;\n}\n")))),(0,r.kt)("a",{name:"blocks--cuddled-elses"}),(0,r.kt)("a",{name:"16.2"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#blocks--cuddled-elses"},"16.2")," If you\u2019re using multiline blocks with ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"else"),", put ",(0,r.kt)("inlineCode",{parentName:"p"},"else")," on the same line as your ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," block\u2019s closing brace. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/brace-style"},(0,r.kt)("inlineCode",{parentName:"a"},"brace-style"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nif (test) {\n  thing1();\n  thing2();\n}\nelse {\n  thing3();\n}\n\n// good\nif (test) {\n  thing1();\n  thing2();\n} else {\n  thing3();\n}\n")))),(0,r.kt)("a",{name:"blocks--no-else-return"}),(0,r.kt)("a",{name:"16.3"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#blocks--no-else-return"},"16.3")," If an ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," block always executes a ",(0,r.kt)("inlineCode",{parentName:"p"},"return")," statement, the subsequent ",(0,r.kt)("inlineCode",{parentName:"p"},"else")," block is unnecessary. A ",(0,r.kt)("inlineCode",{parentName:"p"},"return")," in an ",(0,r.kt)("inlineCode",{parentName:"p"},"else if")," block following an ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," block that contains a ",(0,r.kt)("inlineCode",{parentName:"p"},"return")," can be separated into multiple ",(0,r.kt)("inlineCode",{parentName:"p"},"if")," blocks. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-else-return"},(0,r.kt)("inlineCode",{parentName:"a"},"no-else-return"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nfunction foo() {\n  if (x) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\n// bad\nfunction cats() {\n  if (x) {\n    return x;\n  } else if (y) {\n    return y;\n  }\n}\n\n// bad\nfunction dogs() {\n  if (x) {\n    return x;\n  } else {\n    if (y) {\n      return y;\n    }\n  }\n}\n\n// good\nfunction foo() {\n  if (x) {\n    return x;\n  }\n\n  return y;\n}\n\n// good\nfunction cats() {\n  if (x) {\n    return x;\n  }\n\n  if (y) {\n    return y;\n  }\n}\n\n// good\nfunction dogs(x) {\n  if (x) {\n    if (z) {\n      return y;\n    }\n  } else {\n    return z;\n  }\n}\n")))),(0,r.kt)("h2",{id:"control-statements"},"Control Statements"),(0,r.kt)("a",{name:"control-statements"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#control-statements"},"17.1")," In case your control statement (",(0,r.kt)("inlineCode",{parentName:"p"},"if"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"while")," etc.) gets too long or exceeds the maximum line length, each (grouped) condition could be put into a new line. The logical operator should begin the line."),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? Requiring operators at the beginning of the line keeps the operators aligned and follows a pattern similar to method chaining. This also improves readability by making it easier to visually follow complex logic.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nif ((foo === 123 || bar === 'abc') && doesItLookGoodWhenItBecomesThatLong() && isThisReallyHappening()) {\n  thing1();\n}\n\n// bad\nif (foo === 123 &&\n  bar === 'abc') {\n  thing1();\n}\n\n// bad\nif (foo === 123\n  && bar === 'abc') {\n  thing1();\n}\n\n// bad\nif (\n  foo === 123 &&\n  bar === 'abc'\n) {\n  thing1();\n}\n\n// good\nif (\n  foo === 123\n  && bar === 'abc'\n) {\n  thing1();\n}\n\n// good\nif (\n  (foo === 123 || bar === 'abc')\n  && doesItLookGoodWhenItBecomesThatLong()\n  && isThisReallyHappening()\n) {\n  thing1();\n}\n\n// good\nif (foo === 123 && bar === 'abc') {\n  thing1();\n}\n")))),(0,r.kt)("a",{name:"control-statement--value-selection"}),(0,r.kt)("a",{name:"control-statements--value-selection"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#control-statements--value-selection"},"17.2")," Don't use selection operators in place of control statements."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\n!isRunning && startRunning();\n\n// good\nif (!isRunning) {\n  startRunning();\n}\n")))),(0,r.kt)("h2",{id:"comments"},"Comments"),(0,r.kt)("a",{name:"comments--multiline"}),(0,r.kt)("a",{name:"17.1"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#comments--multiline"},"18.1")," Use ",(0,r.kt)("inlineCode",{parentName:"p"},"/** ... */")," for multiline comments."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\n// make() returns a new element\n// based on the passed in tag name\n//\n// @param {String} tag\n// @return {Element} element\nfunction make(tag) {\n\n  // ...\n\n  return element;\n}\n\n// good\n/**\n * make() returns a new element\n * based on the passed-in tag name\n */\nfunction make(tag) {\n\n  // ...\n\n  return element;\n}\n")))),(0,r.kt)("a",{name:"comments--singleline"}),(0,r.kt)("a",{name:"17.2"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#comments--singleline"},"18.2")," Use ",(0,r.kt)("inlineCode",{parentName:"p"},"//")," for single line comments. Place single line comments on a newline above the subject of the comment. Put an empty line before the comment unless it\u2019s on the first line of a block."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst active = true;  // is current tab\n\n// good\n// is current tab\nconst active = true;\n\n// bad\nfunction getType() {\n  console.log('fetching type...');\n  // set the default type to 'no type'\n  const type = this.type || 'no type';\n\n  return type;\n}\n\n// good\nfunction getType() {\n  console.log('fetching type...');\n\n  // set the default type to 'no type'\n  const type = this.type || 'no type';\n\n  return type;\n}\n\n// also good\nfunction getType() {\n  // set the default type to 'no type'\n  const type = this.type || 'no type';\n\n  return type;\n}\n")))),(0,r.kt)("a",{name:"comments--spaces"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#comments--spaces"},"18.3")," Start all comments with a space to make it easier to read. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/spaced-comment"},(0,r.kt)("inlineCode",{parentName:"a"},"spaced-comment"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\n//is current tab\nconst active = true;\n\n// good\n// is current tab\nconst active = true;\n\n// bad\n/**\n *make() returns a new element\n  *based on the passed-in tag name\n  */\nfunction make(tag) {\n\n  // ...\n\n  return element;\n}\n\n// good\n/**\n * make() returns a new element\n * based on the passed-in tag name\n */\nfunction make(tag) {\n\n  // ...\n\n  return element;\n}\n")))),(0,r.kt)("a",{name:"comments--actionitems"}),(0,r.kt)("a",{name:"17.3"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#comments--actionitems"},"18.4")," Prefixing your comments with ",(0,r.kt)("inlineCode",{parentName:"li"},"FIXME")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"TODO")," helps other developers quickly understand if you\u2019re pointing out a problem that needs to be revisited, or if you\u2019re suggesting a solution to the problem that needs to be implemented. These are different than regular comments because they are actionable. The actions are ",(0,r.kt)("inlineCode",{parentName:"li"},"FIXME: -- need to figure this out")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"TODO: -- need to implement"),".")),(0,r.kt)("a",{name:"comments--fixme"}),(0,r.kt)("a",{name:"17.4"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#comments--fixme"},"18.5")," Use ",(0,r.kt)("inlineCode",{parentName:"p"},"// FIXME:")," to annotate problems."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"class Calculator extends Abacus {\n  constructor() {\n    super();\n\n    // FIXME: shouldn\u2019t use a global here\n    total = 0;\n  }\n}\n")))),(0,r.kt)("a",{name:"comments--todo"}),(0,r.kt)("a",{name:"17.5"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#comments--todo"},"18.6")," Use ",(0,r.kt)("inlineCode",{parentName:"p"},"// TODO:")," to annotate solutions to problems."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"class Calculator extends Abacus {\n  constructor() {\n    super();\n\n    // TODO: total should be configurable by an options param\n    this.total = 0;\n  }\n}\n")))),(0,r.kt)("h2",{id:"whitespace"},"Whitespace"),(0,r.kt)("a",{name:"whitespace--spaces"}),(0,r.kt)("a",{name:"18.1"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#whitespace--spaces"},"19.1")," Use soft tabs (space character) set to 2 spaces. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/indent"},(0,r.kt)("inlineCode",{parentName:"a"},"indent"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nfunction foo() {\n\u2219\u2219\u2219\u2219let name;\n}\n\n// bad\nfunction bar() {\n\u2219let name;\n}\n\n// good\nfunction baz() {\n\u2219\u2219let name;\n}\n")))),(0,r.kt)("a",{name:"whitespace--before-blocks"}),(0,r.kt)("a",{name:"18.2"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#whitespace--before-blocks"},"19.2")," Place 1 space before the leading brace. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/space-before-blocks"},(0,r.kt)("inlineCode",{parentName:"a"},"space-before-blocks"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nfunction test(){\n  console.log('test');\n}\n\n// good\nfunction test() {\n  console.log('test');\n}\n\n// bad\ndog.set('attr',{\n  age: '1 year',\n  breed: 'Bernese Mountain Dog',\n});\n\n// good\ndog.set('attr', {\n  age: '1 year',\n  breed: 'Bernese Mountain Dog',\n});\n")))),(0,r.kt)("a",{name:"whitespace--around-keywords"}),(0,r.kt)("a",{name:"18.3"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#whitespace--around-keywords"},"19.3")," Place 1 space before the opening parenthesis in control statements (",(0,r.kt)("inlineCode",{parentName:"p"},"if"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"while")," etc.). Place no space between the argument list and the function name in function calls and declarations. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/keyword-spacing"},(0,r.kt)("inlineCode",{parentName:"a"},"keyword-spacing"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nif(isJedi) {\n  fight ();\n}\n\n// good\nif (isJedi) {\n  fight();\n}\n\n// bad\nfunction fight () {\n  console.log ('Swooosh!');\n}\n\n// good\nfunction fight() {\n  console.log('Swooosh!');\n}\n")))),(0,r.kt)("a",{name:"whitespace--infix-ops"}),(0,r.kt)("a",{name:"18.4"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#whitespace--infix-ops"},"19.4")," Set off operators with spaces. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/space-infix-ops"},(0,r.kt)("inlineCode",{parentName:"a"},"space-infix-ops"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst x=y+5;\n\n// good\nconst x = y + 5;\n")))),(0,r.kt)("a",{name:"whitespace--newline-at-end"}),(0,r.kt)("a",{name:"18.5"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#whitespace--newline-at-end"},"19.5")," End files with a single newline character. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/eol-last"},(0,r.kt)("inlineCode",{parentName:"a"},"eol-last"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nimport { es6 } from './AirbnbStyleGuide';\n  // ...\nexport default es6;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nimport { es6 } from './AirbnbStyleGuide';\n  // ...\nexport default es6;\u21b5\n\u21b5\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// good\nimport { es6 } from './AirbnbStyleGuide';\n  // ...\nexport default es6;\u21b5\n")))),(0,r.kt)("a",{name:"whitespace--chains"}),(0,r.kt)("a",{name:"18.6"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#whitespace--chains"},"19.6")," Use indentation when making long method chains (more than 2 method chains). Use a leading dot, which\nemphasizes that the line is a method call, not a new statement. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/newline-per-chained-call"},(0,r.kt)("inlineCode",{parentName:"a"},"newline-per-chained-call"))," ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-whitespace-before-property"},(0,r.kt)("inlineCode",{parentName:"a"},"no-whitespace-before-property"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\n$('#items').find('.selected').highlight().end().find('.open').updateCount();\n\n// bad\n$('#items').\n  find('.selected').\n    highlight().\n    end().\n  find('.open').\n    updateCount();\n\n// good\n$('#items')\n  .find('.selected')\n    .highlight()\n    .end()\n  .find('.open')\n    .updateCount();\n\n// bad\nconst leds = stage.selectAll('.led').data(data).enter().append('svg:svg').classed('led', true)\n    .attr('width', (radius + margin) * 2).append('svg:g')\n    .attr('transform', `translate(${radius + margin}, ${radius + margin})`)\n    .call(tron.led);\n\n// good\nconst leds = stage.selectAll('.led')\n    .data(data)\n  .enter().append('svg:svg')\n    .classed('led', true)\n    .attr('width', (radius + margin) * 2)\n  .append('svg:g')\n    .attr('transform', `translate(${radius + margin}, ${radius + margin})`)\n    .call(tron.led);\n\n// good\nconst leds = stage.selectAll('.led').data(data);\nconst svg = leds.enter().append('svg:svg');\nsvg.classed('led', true).attr('width', (radius + margin) * 2);\nconst g = svg.append('svg:g');\ng.attr('transform', `translate(${radius + margin}, ${radius + margin})`).call(tron.led);\n")))),(0,r.kt)("a",{name:"whitespace--after-blocks"}),(0,r.kt)("a",{name:"18.7"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#whitespace--after-blocks"},"19.7")," Leave a blank line after blocks and before the next statement."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nif (foo) {\n  return bar;\n}\nreturn baz;\n\n// good\nif (foo) {\n  return bar;\n}\n\nreturn baz;\n\n// bad\nconst obj = {\n  foo() {\n  },\n  bar() {\n  },\n};\nreturn obj;\n\n// good\nconst obj = {\n  foo() {\n  },\n\n  bar() {\n  },\n};\n\nreturn obj;\n\n// bad\nconst arr = [\n  function foo() {\n  },\n  function bar() {\n  },\n];\nreturn arr;\n\n// good\nconst arr = [\n  function foo() {\n  },\n\n  function bar() {\n  },\n];\n\nreturn arr;\n")))),(0,r.kt)("a",{name:"whitespace--padded-blocks"}),(0,r.kt)("a",{name:"18.8"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#whitespace--padded-blocks"},"19.8")," Do not pad your blocks with blank lines. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/padded-blocks"},(0,r.kt)("inlineCode",{parentName:"a"},"padded-blocks"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nfunction bar() {\n\n  console.log(foo);\n\n}\n\n// bad\nif (baz) {\n\n  console.log(quux);\n} else {\n  console.log(foo);\n\n}\n\n// bad\nclass Foo {\n\n  constructor(bar) {\n    this.bar = bar;\n  }\n}\n\n// good\nfunction bar() {\n  console.log(foo);\n}\n\n// good\nif (baz) {\n  console.log(quux);\n} else {\n  console.log(foo);\n}\n")))),(0,r.kt)("a",{name:"whitespace--no-multiple-blanks"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#whitespace--no-multiple-blanks"},"19.9")," Do not use multiple blank lines to pad your code. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-multiple-empty-lines"},(0,r.kt)("inlineCode",{parentName:"a"},"no-multiple-empty-lines"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nclass Person {\n  constructor(fullName, email, birthday) {\n    this.fullName = fullName;\n\n    this.email = email;\n\n    this.setAge(birthday);\n  }\n\n  setAge(birthday) {\n    const today = new Date();\n\n    const age = this.getAge(today, birthday);\n\n    this.age = age;\n  }\n\n  getAge(today, birthday) {\n    // ..\n  }\n}\n\n// good\nclass Person {\n  constructor(fullName, email, birthday) {\n    this.fullName = fullName;\n    this.email = email;\n    this.setAge(birthday);\n  }\n\n  setAge(birthday) {\n    const today = new Date();\n    const age = getAge(today, birthday);\n    this.age = age;\n  }\n\n  getAge(today, birthday) {\n    // ..\n  }\n}\n")))),(0,r.kt)("a",{name:"whitespace--in-parens"}),(0,r.kt)("a",{name:"18.9"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#whitespace--in-parens"},"19.10")," Do not add spaces inside parentheses. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/space-in-parens"},(0,r.kt)("inlineCode",{parentName:"a"},"space-in-parens"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nfunction bar( foo ) {\n  return foo;\n}\n\n// good\nfunction bar(foo) {\n  return foo;\n}\n\n// bad\nif ( foo ) {\n  console.log(foo);\n}\n\n// good\nif (foo) {\n  console.log(foo);\n}\n")))),(0,r.kt)("a",{name:"whitespace--in-brackets"}),(0,r.kt)("a",{name:"18.10"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#whitespace--in-brackets"},"19.11")," Do not add spaces inside brackets. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/array-bracket-spacing"},(0,r.kt)("inlineCode",{parentName:"a"},"array-bracket-spacing"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst foo = [ 1, 2, 3 ];\nconsole.log(foo[ 0 ]);\n\n// good\nconst foo = [1, 2, 3];\nconsole.log(foo[0]);\n")))),(0,r.kt)("a",{name:"whitespace--in-braces"}),(0,r.kt)("a",{name:"18.11"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#whitespace--in-braces"},"19.12")," Add spaces inside curly braces. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/object-curly-spacing"},(0,r.kt)("inlineCode",{parentName:"a"},"object-curly-spacing"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst foo = {clark: 'kent'};\n\n// good\nconst foo = { clark: 'kent' };\n")))),(0,r.kt)("a",{name:"whitespace--max-len"}),(0,r.kt)("a",{name:"18.12"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#whitespace--max-len"},"19.13")," Avoid having lines of code that are longer than 100 characters (including whitespace). Note: per ",(0,r.kt)("a",{parentName:"p",href:"#strings--line-length"},"above"),", long strings are exempt from this rule, and should not be broken up. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/max-len"},(0,r.kt)("inlineCode",{parentName:"a"},"max-len"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Why? This ensures readability and maintainability.")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst foo = jsonData && jsonData.foo && jsonData.foo.bar && jsonData.foo.bar.baz && jsonData.foo.bar.baz.quux && jsonData.foo.bar.baz.quux.xyzzy;\n\n// bad\n$.ajax({ method: 'POST', url: 'https://airbnb.com/', data: { name: 'John' } }).done(() => console.log('Congratulations!')).fail(() => console.log('You have failed this city.'));\n\n// good\nconst foo = jsonData\n  && jsonData.foo\n  && jsonData.foo.bar\n  && jsonData.foo.bar.baz\n  && jsonData.foo.bar.baz.quux\n  && jsonData.foo.bar.baz.quux.xyzzy;\n\n// better\nconst foo = jsonData\n  ?.foo\n  ?.bar\n  ?.baz\n  ?.quux\n  ?.xyzzy;\n\n// good\n$.ajax({\n  method: 'POST',\n  url: 'https://airbnb.com/',\n  data: { name: 'John' },\n})\n  .done(() => console.log('Congratulations!'))\n  .fail(() => console.log('You have failed this city.'));\n")))),(0,r.kt)("a",{name:"whitespace--block-spacing"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#whitespace--block-spacing"},"19.14")," Require consistent spacing inside an open block token and the next token on the same line. This rule also enforces consistent spacing inside a close block token and previous token on the same line. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/block-spacing"},(0,r.kt)("inlineCode",{parentName:"a"},"block-spacing"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nfunction foo() {return true;}\nif (foo) { bar = 0;}\n\n// good\nfunction foo() { return true; }\nif (foo) { bar = 0; }\n")))),(0,r.kt)("a",{name:"whitespace--comma-spacing"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#whitespace--comma-spacing"},"19.15")," Avoid spaces before commas and require a space after commas. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/comma-spacing"},(0,r.kt)("inlineCode",{parentName:"a"},"comma-spacing"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst foo = 1,bar = 2;\nconst arr = [1 , 2];\n\n// good\nconst foo = 1, bar = 2;\nconst arr = [1, 2];\n")))),(0,r.kt)("a",{name:"whitespace--computed-property-spacing"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#whitespace--computed-property-spacing"},"19.16")," Enforce spacing inside of computed property brackets. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/computed-property-spacing"},(0,r.kt)("inlineCode",{parentName:"a"},"computed-property-spacing"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nobj[foo ]\nobj[ 'foo']\nconst x = {[ b ]: a}\nobj[foo[ bar ]]\n\n// good\nobj[foo]\nobj['foo']\nconst x = { [b]: a }\nobj[foo[bar]]\n")))),(0,r.kt)("a",{name:"whitespace--func-call-spacing"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#whitespace--func-call-spacing"},"19.17")," Avoid spaces between functions and their invocations. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/func-call-spacing"},(0,r.kt)("inlineCode",{parentName:"a"},"func-call-spacing"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nfunc ();\n\nfunc\n();\n\n// good\nfunc();\n")))),(0,r.kt)("a",{name:"whitespace--key-spacing"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#whitespace--key-spacing"},"19.18")," Enforce spacing between keys and values in object literal properties. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/key-spacing"},(0,r.kt)("inlineCode",{parentName:"a"},"key-spacing"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad\nconst obj = { foo : 42 };\nconst obj2 = { foo:42 };\n\n// good\nconst obj = { foo: 42 };\n")))),(0,r.kt)("a",{name:"whitespace--no-trailing-spaces"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#whitespace--no-trailing-spaces"},"19.19")," Avoid trailing spaces at the end of lines. eslint: ",(0,r.kt)("a",{parentName:"li",href:"https://eslint.org/docs/rules/no-trailing-spaces"},(0,r.kt)("inlineCode",{parentName:"a"},"no-trailing-spaces")))),(0,r.kt)("a",{name:"whitespace--no-multiple-empty-lines"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"#whitespace--no-multiple-empty-lines"},"19.20")," Avoid multiple empty lines, only allow one newline at the end of files, and avoid a newline at the beginning of files. eslint: ",(0,r.kt)("a",{parentName:"p",href:"https://eslint.org/docs/rules/no-multiple-empty-lines"},(0,r.kt)("inlineCode",{parentName:"a"},"no-multiple-empty-lines"))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"// bad - multiple empty lines\nconst x = 1;\n\nconst y = 2;\n\n// bad - 2+ newlines at end of file\nconst x = 1;\nconst y = 2;\n\n// bad - 1+ newline(s) at beginning of file\nconst x = 1;\nconst y = 2;\n\n// good\nconst x = 1;\nconst y = 2;\n")))))}c.isMDXComponent=!0}}]);