"use strict";(self.webpackChunkkhanhhv_docs=self.webpackChunkkhanhhv_docs||[]).push([[6396],{4137:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=p(n),k=l,d=u["".concat(s,".").concat(k)]||u[k]||c[k]||i;return n?a.createElement(d,r(r({ref:t},m),{},{components:n})):a.createElement(d,r({ref:t},m))}));function d(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=k;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:l,r[1]=o;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},4283:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(3117),l=(n(7294),n(4137));const i={title:"Rules",description:"Conventional Commits Rules",slug:"/conventions/conventional-commits/rules",last_update:{date:"03/28/2023",author:"Truong Vi"}},r=void 0,o={unversionedId:"Conventions/ConventionalCommits/rules",id:"Conventions/ConventionalCommits/rules",title:"Rules",description:"Conventional Commits Rules",source:"@site/docs/Conventions/ConventionalCommits/rules.mdx",sourceDirName:"Conventions/ConventionalCommits",slug:"/conventions/conventional-commits/rules",permalink:"/docs/build/docs/conventions/conventional-commits/rules",draft:!1,tags:[],version:"current",lastUpdatedBy:"Truong Vi",lastUpdatedAt:1679936400,formattedLastUpdatedAt:"Mar 27, 2023",frontMatter:{title:"Rules",description:"Conventional Commits Rules",slug:"/conventions/conventional-commits/rules",last_update:{date:"03/28/2023",author:"Truong Vi"}},sidebar:"conventionalCommits",previous:{title:"Overview",permalink:"/docs/build/docs/conventions/conventional-commits/over-view"},next:{title:"Open Commit",permalink:"/docs/build/docs/conventions/conventional-commits/extensions/open-commit"}},s={},p=[{value:"type-enum",id:"type-enum",level:4},{value:"type-case",id:"type-case",level:4},{value:"type-empty",id:"type-empty",level:4},{value:"subject-case",id:"subject-case",level:4},{value:"subject-empty",id:"subject-empty",level:4},{value:"subject-full-stop",id:"subject-full-stop",level:4},{value:"header-max-length",id:"header-max-length",level:4},{value:"footer-leading-blank",id:"footer-leading-blank",level:4},{value:"footer-max-line-length",id:"footer-max-line-length",level:4},{value:"body-leading-blank",id:"body-leading-blank",level:4},{value:"body-max-line-length",id:"body-max-line-length",level:4}],m={toc:p};function u(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h4",{id:"type-enum"},"type-enum"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"condition"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"type")," is found in value")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"rule"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"always"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"level"),": ",(0,l.kt)("inlineCode",{parentName:"p"},"error"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},"value")),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"[\n  'build',\n  'chore',\n  'ci',\n  'docs',\n  'feat',\n  'fix',\n  'perf',\n  'refactor',\n  'revert',\n  'style',\n  'test'\n];\n")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'echo "foo: some message" # fails\necho "fix: some message" # passes\n')),(0,l.kt)("h4",{id:"type-case"},"type-case"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"description"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"type")," is in case ",(0,l.kt)("inlineCode",{parentName:"li"},"value")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"rule"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"always")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"level"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"error")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"'lowerCase'\n")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'echo "FIX: some message" # fails\necho "fix: some message" # passes\n')),(0,l.kt)("h4",{id:"type-empty"},"type-empty"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"condition"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"type")," is empty"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"rule"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"never")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"level"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"error"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'echo ": some message" # fails\necho "fix: some message" # passes\n')),(0,l.kt)("h4",{id:"subject-case"},"subject-case"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"condition"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"subject")," is in one of the cases ",(0,l.kt)("inlineCode",{parentName:"li"},"['sentence-case', 'start-case', 'pascal-case', 'upper-case']")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"rule"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"never")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"level"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"error"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'echo "fix(SCOPE): Some message" # fails\necho "fix(SCOPE): Some Message" # fails\necho "fix(SCOPE): SomeMessage" # fails\necho "fix(SCOPE): SOMEMESSAGE" # fails\necho "fix(scope): some message" # passes\necho "fix(scope): some Message" # passes\n')),(0,l.kt)("h4",{id:"subject-empty"},"subject-empty"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"condition"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"subject")," is empty"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"rule"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"never")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"level"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"error"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'echo "fix:" # fails\necho "fix: some message" # passes\n')),(0,l.kt)("h4",{id:"subject-full-stop"},"subject-full-stop"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"condition"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"subject")," ends with ",(0,l.kt)("inlineCode",{parentName:"li"},"value")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"rule"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"never")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"level"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"error")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"'.'\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'echo "fix: some message." # fails\necho "fix: some message" # passes\n')),(0,l.kt)("h4",{id:"header-max-length"},"header-max-length"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"condition"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"header")," has ",(0,l.kt)("inlineCode",{parentName:"li"},"value")," or less characters"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"rule"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"always")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"level"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"error")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"100\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'echo "fix: some message that is way too long and breaks the line max-length by several characters" # fails\necho "fix: some message" # passes\n')),(0,l.kt)("h4",{id:"footer-leading-blank"},"footer-leading-blank"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"condition"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"footer")," should have a leading blank line"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"rule"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"always")),(0,l.kt)("li",{parentName:"ul"},"level: ",(0,l.kt)("inlineCode",{parentName:"li"},"warning"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'echo "fix: some message\nBREAKING CHANGE: It will be significant" # warning\n\necho "fix: some message\n\nBREAKING CHANGE: It will be significant" # passes\n')),(0,l.kt)("h4",{id:"footer-max-line-length"},"footer-max-line-length"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"condition"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"footer")," each line has ",(0,l.kt)("inlineCode",{parentName:"li"},"value")," or less characters"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"rule"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"always")),(0,l.kt)("li",{parentName:"ul"},"level: ",(0,l.kt)("inlineCode",{parentName:"li"},"error")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"100\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'echo "fix: some message\n\nBREAKING CHANGE: footer with multiple lines\nhas a message that is way too long and will break the line rule \'line-max-length\' by several characters" # fails\n\necho "fix: some message\n\nBREAKING CHANGE: footer with multiple lines\nbut still no line is too long" # passes\n')),(0,l.kt)("h4",{id:"body-leading-blank"},"body-leading-blank"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"condition"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"body")," should have a leading blank line"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"rule"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"always")),(0,l.kt)("li",{parentName:"ul"},"level: ",(0,l.kt)("inlineCode",{parentName:"li"},"warning"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'echo "fix: some message\nbody" # warning\n\necho "fix: some message\n\nbody" # passes\n')),(0,l.kt)("h4",{id:"body-max-line-length"},"body-max-line-length"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"condition"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"body")," each line has ",(0,l.kt)("inlineCode",{parentName:"li"},"value")," or less characters"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"rule"),": ",(0,l.kt)("inlineCode",{parentName:"li"},"always")),(0,l.kt)("li",{parentName:"ul"},"level: ",(0,l.kt)("inlineCode",{parentName:"li"},"error")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"100\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sh"},'echo "fix: some message\n\nbody with multiple lines\nhas a message that is way too long and will break the line rule \'line-max-length\' by several characters" # fails\n\necho "fix: some message\n\nbody with multiple lines\nbut still no line is too long" # passes\n')))}u.isMDXComponent=!0}}]);